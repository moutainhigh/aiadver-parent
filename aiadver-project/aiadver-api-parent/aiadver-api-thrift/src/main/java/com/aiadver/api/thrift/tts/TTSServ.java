/**
 * Autogenerated by Thrift Compiler (0.13.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.aiadver.api.thrift.tts;


import org.apache.thrift.*;
import org.apache.thrift.annotation.Nullable;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.StructMetaData;
import org.apache.thrift.protocol.*;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer;
import org.apache.thrift.transport.TIOStreamTransport;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TNonblockingTransport;
import org.apache.thrift.transport.TTransportException;

import java.io.Serializable;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-24")
public class TTSServ {

    public interface Iface {

        public int tts_init(String username, String password, String login_params) throws TException;

        public int tts_put_text(String text, String ssb_params, String tts_params) throws TException;

        public TTSResult tts_get_result() throws TException;

    }

    public interface AsyncIface {

        public void tts_init(String username, String password, String login_params, AsyncMethodCallback<Integer> resultHandler) throws TException;

        public void tts_put_text(String text, String ssb_params, String tts_params, AsyncMethodCallback<Integer> resultHandler) throws TException;

        public void tts_get_result(AsyncMethodCallback<TTSResult> resultHandler) throws TException;

    }

    public static class Client extends TServiceClient implements Iface {
        public Client(TProtocol prot) {
            super(prot, prot);
        }

        public Client(TProtocol iprot, TProtocol oprot) {
            super(iprot, oprot);
        }

        public int tts_init(String username, String password, String login_params) throws TException {
            send_tts_init(username, password, login_params);
            return recv_tts_init();
        }

        public void send_tts_init(String username, String password, String login_params) throws TException {
            tts_init_args args = new tts_init_args();
            args.setUsername(username);
            args.setPassword(password);
            args.setLogin_params(login_params);
            sendBase("tts_init", args);
        }

        public int recv_tts_init() throws TException {
            tts_init_result result = new tts_init_result();
            receiveBase(result, "tts_init");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "tts_init failed: unknown result");
        }

        public int tts_put_text(String text, String ssb_params, String tts_params) throws TException {
            send_tts_put_text(text, ssb_params, tts_params);
            return recv_tts_put_text();
        }

        public void send_tts_put_text(String text, String ssb_params, String tts_params) throws TException {
            tts_put_text_args args = new tts_put_text_args();
            args.setText(text);
            args.setSsb_params(ssb_params);
            args.setTts_params(tts_params);
            sendBase("tts_put_text", args);
        }

        public int recv_tts_put_text() throws TException {
            tts_put_text_result result = new tts_put_text_result();
            receiveBase(result, "tts_put_text");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "tts_put_text failed: unknown result");
        }

        public TTSResult tts_get_result() throws TException {
            send_tts_get_result();
            return recv_tts_get_result();
        }

        public void send_tts_get_result() throws TException {
            tts_get_result_args args = new tts_get_result_args();
            sendBase("tts_get_result", args);
        }

        public TTSResult recv_tts_get_result() throws TException {
            tts_get_result_result result = new tts_get_result_result();
            receiveBase(result, "tts_get_result");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "tts_get_result failed: unknown result");
        }

        public static class Factory implements TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(TProtocol iprot, TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

    }

    public static class AsyncClient extends TAsyncClient implements AsyncIface {
        public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void tts_init(String username, String password, String login_params, AsyncMethodCallback<Integer> resultHandler) throws TException {
            checkReady();
            tts_init_call method_call = new tts_init_call(username, password, login_params, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void tts_put_text(String text, String ssb_params, String tts_params, AsyncMethodCallback<Integer> resultHandler) throws TException {
            checkReady();
            tts_put_text_call method_call = new tts_put_text_call(text, ssb_params, tts_params, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void tts_get_result(AsyncMethodCallback<TTSResult> resultHandler) throws TException {
            checkReady();
            tts_get_result_call method_call = new tts_get_result_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Factory implements TAsyncClientFactory<AsyncClient> {
            private TAsyncClientManager clientManager;
            private TProtocolFactory protocolFactory;

            public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public static class tts_init_call extends TAsyncMethodCall<Integer> {
            private String username;
            private String password;
            private String login_params;

            public tts_init_call(String username, String password, String login_params, AsyncMethodCallback<Integer> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.username = username;
                this.password = password;
                this.login_params = login_params;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("tts_init", TMessageType.CALL, 0));
                tts_init_args args = new tts_init_args();
                args.setUsername(username);
                args.setPassword(password);
                args.setLogin_params(login_params);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Integer getResult() throws TException {
                if (getState() != TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_tts_init();
            }
        }

        public static class tts_put_text_call extends TAsyncMethodCall<Integer> {
            private String text;
            private String ssb_params;
            private String tts_params;

            public tts_put_text_call(String text, String ssb_params, String tts_params, AsyncMethodCallback<Integer> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.text = text;
                this.ssb_params = ssb_params;
                this.tts_params = tts_params;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("tts_put_text", TMessageType.CALL, 0));
                tts_put_text_args args = new tts_put_text_args();
                args.setText(text);
                args.setSsb_params(ssb_params);
                args.setTts_params(tts_params);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Integer getResult() throws TException {
                if (getState() != TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_tts_put_text();
            }
        }

        public static class tts_get_result_call extends TAsyncMethodCall<TTSResult> {
            public tts_get_result_call(AsyncMethodCallback<TTSResult> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("tts_get_result", TMessageType.CALL, 0));
                tts_get_result_args args = new tts_get_result_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public TTSResult getResult() throws TException {
                if (getState() != TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_tts_get_result();
            }
        }

    }

    public static class Processor<I extends Iface> extends TBaseProcessor<I> implements TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, ProcessFunction<I, ? extends TBase>>()));
        }

        protected Processor(I iface, Map<String, ProcessFunction<I, ? extends TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, ProcessFunction<I, ? extends TBase>> getProcessMap(Map<String, ProcessFunction<I, ? extends TBase>> processMap) {
            processMap.put("tts_init", new tts_init());
            processMap.put("tts_put_text", new tts_put_text());
            processMap.put("tts_get_result", new tts_get_result());
            return processMap;
        }

        public static class tts_init<I extends Iface> extends ProcessFunction<I, tts_init_args> {
            public tts_init() {
                super("tts_init");
            }

            public tts_init_args getEmptyArgsInstance() {
                return new tts_init_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public tts_init_result getResult(I iface, tts_init_args args) throws TException {
                tts_init_result result = new tts_init_result();
                result.success = iface.tts_init(args.username, args.password, args.login_params);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class tts_put_text<I extends Iface> extends ProcessFunction<I, tts_put_text_args> {
            public tts_put_text() {
                super("tts_put_text");
            }

            public tts_put_text_args getEmptyArgsInstance() {
                return new tts_put_text_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public tts_put_text_result getResult(I iface, tts_put_text_args args) throws TException {
                tts_put_text_result result = new tts_put_text_result();
                result.success = iface.tts_put_text(args.text, args.ssb_params, args.tts_params);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class tts_get_result<I extends Iface> extends ProcessFunction<I, tts_get_result_args> {
            public tts_get_result() {
                super("tts_get_result");
            }

            public tts_get_result_args getEmptyArgsInstance() {
                return new tts_get_result_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public tts_get_result_result getResult(I iface, tts_get_result_args args) throws TException {
                tts_get_result_result result = new tts_get_result_result();
                result.success = iface.tts_get_result();
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, AsyncProcessFunction<I, ? extends TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, AsyncProcessFunction<I, ? extends TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, AsyncProcessFunction<I, ? extends TBase, ?>> getProcessMap(Map<String, AsyncProcessFunction<I, ? extends TBase, ?>> processMap) {
            processMap.put("tts_init", new tts_init());
            processMap.put("tts_put_text", new tts_put_text());
            processMap.put("tts_get_result", new tts_get_result());
            return processMap;
        }

        public static class tts_init<I extends AsyncIface> extends AsyncProcessFunction<I, tts_init_args, Integer> {
            public tts_init() {
                super("tts_init");
            }

            public tts_init_args getEmptyArgsInstance() {
                return new tts_init_args();
            }

            public AsyncMethodCallback<Integer> getResultHandler(final AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        tts_init_result result = new tts_init_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, TMessageType.REPLY, seqid);
                        } catch (TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = TMessageType.REPLY;
                        TSerializable msg;
                        tts_init_result result = new tts_init_result();
                        if (e instanceof TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = TMessageType.EXCEPTION;
                            msg = (TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = TMessageType.EXCEPTION;
                            msg = new TApplicationException(TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, tts_init_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.tts_init(args.username, args.password, args.login_params, resultHandler);
            }
        }

        public static class tts_put_text<I extends AsyncIface> extends AsyncProcessFunction<I, tts_put_text_args, Integer> {
            public tts_put_text() {
                super("tts_put_text");
            }

            public tts_put_text_args getEmptyArgsInstance() {
                return new tts_put_text_args();
            }

            public AsyncMethodCallback<Integer> getResultHandler(final AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        tts_put_text_result result = new tts_put_text_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, TMessageType.REPLY, seqid);
                        } catch (TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = TMessageType.REPLY;
                        TSerializable msg;
                        tts_put_text_result result = new tts_put_text_result();
                        if (e instanceof TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = TMessageType.EXCEPTION;
                            msg = (TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = TMessageType.EXCEPTION;
                            msg = new TApplicationException(TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, tts_put_text_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.tts_put_text(args.text, args.ssb_params, args.tts_params, resultHandler);
            }
        }

        public static class tts_get_result<I extends AsyncIface> extends AsyncProcessFunction<I, tts_get_result_args, TTSResult> {
            public tts_get_result() {
                super("tts_get_result");
            }

            public tts_get_result_args getEmptyArgsInstance() {
                return new tts_get_result_args();
            }

            public AsyncMethodCallback<TTSResult> getResultHandler(final AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<TTSResult>() {
                    public void onComplete(TTSResult o) {
                        tts_get_result_result result = new tts_get_result_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, TMessageType.REPLY, seqid);
                        } catch (TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = TMessageType.REPLY;
                        TSerializable msg;
                        tts_get_result_result result = new tts_get_result_result();
                        if (e instanceof TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = TMessageType.EXCEPTION;
                            msg = (TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = TMessageType.EXCEPTION;
                            msg = new TApplicationException(TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, tts_get_result_args args, AsyncMethodCallback<TTSResult> resultHandler) throws TException {
                iface.tts_get_result(resultHandler);
            }
        }

    }

    public static class tts_init_args implements TBase<tts_init_args, tts_init_args._Fields>, Serializable, Cloneable, Comparable<tts_init_args> {
        // isset id assignments
        public static final Map<_Fields, FieldMetaData> metaDataMap;
        private static final TStruct STRUCT_DESC = new TStruct("tts_init_args");
        private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short) 1);
        private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short) 2);
        private static final TField LOGIN_PARAMS_FIELD_DESC = new TField("login_params", TType.STRING, (short) 3);
        private static final SchemeFactory STANDARD_SCHEME_FACTORY = new tts_init_argsStandardSchemeFactory();
        private static final SchemeFactory TUPLE_SCHEME_FACTORY = new tts_init_argsTupleSchemeFactory();

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.PASSWORD, new FieldMetaData("password", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.LOGIN_PARAMS, new FieldMetaData("login_params", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(tts_init_args.class, metaDataMap);
        }

        public @Nullable
        String username; // required
        public @Nullable
        String password; // required
        public @Nullable
        String login_params; // required

        public tts_init_args() {
        }

        public tts_init_args(
                String username,
                String password,
                String login_params) {
            this();
            this.username = username;
            this.password = password;
            this.login_params = login_params;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public tts_init_args(tts_init_args other) {
            if (other.isSetUsername()) {
                this.username = other.username;
            }
            if (other.isSetPassword()) {
                this.password = other.password;
            }
            if (other.isSetLogin_params()) {
                this.login_params = other.login_params;
            }
        }

        private static <S extends IScheme> S scheme(TProtocol proto) {
            return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public tts_init_args deepCopy() {
            return new tts_init_args(this);
        }

        @Override
        public void clear() {
            this.username = null;
            this.password = null;
            this.login_params = null;
        }

        @Nullable
        public String getUsername() {
            return this.username;
        }

        public tts_init_args setUsername(@Nullable String username) {
            this.username = username;
            return this;
        }

        public void unsetUsername() {
            this.username = null;
        }

        /**
         * Returns true if field username is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUsername() {
            return this.username != null;
        }

        public void setUsernameIsSet(boolean value) {
            if (!value) {
                this.username = null;
            }
        }

        @Nullable
        public String getPassword() {
            return this.password;
        }

        public tts_init_args setPassword(@Nullable String password) {
            this.password = password;
            return this;
        }

        public void unsetPassword() {
            this.password = null;
        }

        /**
         * Returns true if field password is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPassword() {
            return this.password != null;
        }

        public void setPasswordIsSet(boolean value) {
            if (!value) {
                this.password = null;
            }
        }

        @Nullable
        public String getLogin_params() {
            return this.login_params;
        }

        public tts_init_args setLogin_params(@Nullable String login_params) {
            this.login_params = login_params;
            return this;
        }

        public void unsetLogin_params() {
            this.login_params = null;
        }

        /**
         * Returns true if field login_params is set (has been assigned a value) and false otherwise
         */
        public boolean isSetLogin_params() {
            return this.login_params != null;
        }

        public void setLogin_paramsIsSet(boolean value) {
            if (!value) {
                this.login_params = null;
            }
        }

        public void setFieldValue(_Fields field, @Nullable Object value) {
            switch (field) {
                case USERNAME:
                    if (value == null) {
                        unsetUsername();
                    } else {
                        setUsername((String) value);
                    }
                    break;

                case PASSWORD:
                    if (value == null) {
                        unsetPassword();
                    } else {
                        setPassword((String) value);
                    }
                    break;

                case LOGIN_PARAMS:
                    if (value == null) {
                        unsetLogin_params();
                    } else {
                        setLogin_params((String) value);
                    }
                    break;

            }
        }

        @Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USERNAME:
                    return getUsername();

                case PASSWORD:
                    return getPassword();

                case LOGIN_PARAMS:
                    return getLogin_params();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USERNAME:
                    return isSetUsername();
                case PASSWORD:
                    return isSetPassword();
                case LOGIN_PARAMS:
                    return isSetLogin_params();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof tts_init_args)
                return this.equals((tts_init_args) that);
            return false;
        }

        public boolean equals(tts_init_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_username = true && this.isSetUsername();
            boolean that_present_username = true && that.isSetUsername();
            if (this_present_username || that_present_username) {
                if (!(this_present_username && that_present_username))
                    return false;
                if (!this.username.equals(that.username))
                    return false;
            }

            boolean this_present_password = true && this.isSetPassword();
            boolean that_present_password = true && that.isSetPassword();
            if (this_present_password || that_present_password) {
                if (!(this_present_password && that_present_password))
                    return false;
                if (!this.password.equals(that.password))
                    return false;
            }

            boolean this_present_login_params = true && this.isSetLogin_params();
            boolean that_present_login_params = true && that.isSetLogin_params();
            if (this_present_login_params || that_present_login_params) {
                if (!(this_present_login_params && that_present_login_params))
                    return false;
                if (!this.login_params.equals(that.login_params))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
            if (isSetUsername())
                hashCode = hashCode * 8191 + username.hashCode();

            hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
            if (isSetPassword())
                hashCode = hashCode * 8191 + password.hashCode();

            hashCode = hashCode * 8191 + ((isSetLogin_params()) ? 131071 : 524287);
            if (isSetLogin_params())
                hashCode = hashCode * 8191 + login_params.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(tts_init_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsername()) {
                lastComparison = TBaseHelper.compareTo(this.username, other.username);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPassword()) {
                lastComparison = TBaseHelper.compareTo(this.password, other.password);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetLogin_params()).compareTo(other.isSetLogin_params());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLogin_params()) {
                lastComparison = TBaseHelper.compareTo(this.login_params, other.login_params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(TProtocol oprot) throws TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("tts_init_args(");
            boolean first = true;

            sb.append("username:");
            if (this.username == null) {
                sb.append("null");
            } else {
                sb.append(this.username);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("password:");
            if (this.password == null) {
                sb.append("null");
            } else {
                sb.append(this.password);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("login_params:");
            if (this.login_params == null) {
                sb.append("null");
            } else {
                sb.append(this.login_params);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new TCompactProtocol(new TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new TCompactProtocol(new TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            USERNAME((short) 1, "username"),
            PASSWORD((short) 2, "password"),
            LOGIN_PARAMS((short) 3, "login_params");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USERNAME
                        return USERNAME;
                    case 2: // PASSWORD
                        return PASSWORD;
                    case 3: // LOGIN_PARAMS
                        return LOGIN_PARAMS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class tts_init_argsStandardSchemeFactory implements SchemeFactory {
            public tts_init_argsStandardScheme getScheme() {
                return new tts_init_argsStandardScheme();
            }
        }

        private static class tts_init_argsStandardScheme extends StandardScheme<tts_init_args> {

            public void read(TProtocol iprot, tts_init_args struct) throws TException {
                TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USERNAME
                            if (schemeField.type == TType.STRING) {
                                struct.username = iprot.readString();
                                struct.setUsernameIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PASSWORD
                            if (schemeField.type == TType.STRING) {
                                struct.password = iprot.readString();
                                struct.setPasswordIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // LOGIN_PARAMS
                            if (schemeField.type == TType.STRING) {
                                struct.login_params = iprot.readString();
                                struct.setLogin_paramsIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(TProtocol oprot, tts_init_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.username != null) {
                    oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                    oprot.writeString(struct.username);
                    oprot.writeFieldEnd();
                }
                if (struct.password != null) {
                    oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
                    oprot.writeString(struct.password);
                    oprot.writeFieldEnd();
                }
                if (struct.login_params != null) {
                    oprot.writeFieldBegin(LOGIN_PARAMS_FIELD_DESC);
                    oprot.writeString(struct.login_params);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class tts_init_argsTupleSchemeFactory implements SchemeFactory {
            public tts_init_argsTupleScheme getScheme() {
                return new tts_init_argsTupleScheme();
            }
        }

        private static class tts_init_argsTupleScheme extends TupleScheme<tts_init_args> {

            @Override
            public void write(TProtocol prot, tts_init_args struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUsername()) {
                    optionals.set(0);
                }
                if (struct.isSetPassword()) {
                    optionals.set(1);
                }
                if (struct.isSetLogin_params()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUsername()) {
                    oprot.writeString(struct.username);
                }
                if (struct.isSetPassword()) {
                    oprot.writeString(struct.password);
                }
                if (struct.isSetLogin_params()) {
                    oprot.writeString(struct.login_params);
                }
            }

            @Override
            public void read(TProtocol prot, tts_init_args struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.username = iprot.readString();
                    struct.setUsernameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.password = iprot.readString();
                    struct.setPasswordIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.login_params = iprot.readString();
                    struct.setLogin_paramsIsSet(true);
                }
            }
        }
    }

    public static class tts_init_result implements TBase<tts_init_result, tts_init_result._Fields>, Serializable, Cloneable, Comparable<tts_init_result> {
        public static final Map<_Fields, FieldMetaData> metaDataMap;
        private static final TStruct STRUCT_DESC = new TStruct("tts_init_result");
        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short) 0);
        private static final SchemeFactory STANDARD_SCHEME_FACTORY = new tts_init_resultStandardSchemeFactory();
        private static final SchemeFactory TUPLE_SCHEME_FACTORY = new tts_init_resultTupleSchemeFactory();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(tts_init_result.class, metaDataMap);
        }

        public int success; // required
        private byte __isset_bitfield = 0;

        public tts_init_result() {
        }

        public tts_init_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public tts_init_result(tts_init_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        private static <S extends IScheme> S scheme(TProtocol proto) {
            return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public tts_init_result deepCopy() {
            return new tts_init_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public tts_init_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @Nullable Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        @Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof tts_init_result)
                return this.equals((tts_init_result) that);
            return false;
        }

        public boolean equals(tts_init_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + success;

            return hashCode;
        }

        @Override
        public int compareTo(tts_init_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(TProtocol oprot) throws TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("tts_init_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new TCompactProtocol(new TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new TCompactProtocol(new TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class tts_init_resultStandardSchemeFactory implements SchemeFactory {
            public tts_init_resultStandardScheme getScheme() {
                return new tts_init_resultStandardScheme();
            }
        }

        private static class tts_init_resultStandardScheme extends StandardScheme<tts_init_result> {

            public void read(TProtocol iprot, tts_init_result struct) throws TException {
                TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(TProtocol oprot, tts_init_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class tts_init_resultTupleSchemeFactory implements SchemeFactory {
            public tts_init_resultTupleScheme getScheme() {
                return new tts_init_resultTupleScheme();
            }
        }

        private static class tts_init_resultTupleScheme extends TupleScheme<tts_init_result> {

            @Override
            public void write(TProtocol prot, tts_init_result struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(TProtocol prot, tts_init_result struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class tts_put_text_args implements TBase<tts_put_text_args, tts_put_text_args._Fields>, Serializable, Cloneable, Comparable<tts_put_text_args> {
        // isset id assignments
        public static final Map<_Fields, FieldMetaData> metaDataMap;
        private static final TStruct STRUCT_DESC = new TStruct("tts_put_text_args");
        private static final TField TEXT_FIELD_DESC = new TField("text", TType.STRING, (short) 1);
        private static final TField SSB_PARAMS_FIELD_DESC = new TField("ssb_params", TType.STRING, (short) 2);
        private static final TField TTS_PARAMS_FIELD_DESC = new TField("tts_params", TType.STRING, (short) 3);
        private static final SchemeFactory STANDARD_SCHEME_FACTORY = new tts_put_text_argsStandardSchemeFactory();
        private static final SchemeFactory TUPLE_SCHEME_FACTORY = new tts_put_text_argsTupleSchemeFactory();

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.TEXT, new FieldMetaData("text", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.SSB_PARAMS, new FieldMetaData("ssb_params", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            tmpMap.put(_Fields.TTS_PARAMS, new FieldMetaData("tts_params", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(tts_put_text_args.class, metaDataMap);
        }

        public @Nullable
        String text; // required
        public @Nullable
        String ssb_params; // required
        public @Nullable
        String tts_params; // required

        public tts_put_text_args() {
        }

        public tts_put_text_args(
                String text,
                String ssb_params,
                String tts_params) {
            this();
            this.text = text;
            this.ssb_params = ssb_params;
            this.tts_params = tts_params;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public tts_put_text_args(tts_put_text_args other) {
            if (other.isSetText()) {
                this.text = other.text;
            }
            if (other.isSetSsb_params()) {
                this.ssb_params = other.ssb_params;
            }
            if (other.isSetTts_params()) {
                this.tts_params = other.tts_params;
            }
        }

        private static <S extends IScheme> S scheme(TProtocol proto) {
            return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public tts_put_text_args deepCopy() {
            return new tts_put_text_args(this);
        }

        @Override
        public void clear() {
            this.text = null;
            this.ssb_params = null;
            this.tts_params = null;
        }

        @Nullable
        public String getText() {
            return this.text;
        }

        public tts_put_text_args setText(@Nullable String text) {
            this.text = text;
            return this;
        }

        public void unsetText() {
            this.text = null;
        }

        /**
         * Returns true if field text is set (has been assigned a value) and false otherwise
         */
        public boolean isSetText() {
            return this.text != null;
        }

        public void setTextIsSet(boolean value) {
            if (!value) {
                this.text = null;
            }
        }

        @Nullable
        public String getSsb_params() {
            return this.ssb_params;
        }

        public tts_put_text_args setSsb_params(@Nullable String ssb_params) {
            this.ssb_params = ssb_params;
            return this;
        }

        public void unsetSsb_params() {
            this.ssb_params = null;
        }

        /**
         * Returns true if field ssb_params is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSsb_params() {
            return this.ssb_params != null;
        }

        public void setSsb_paramsIsSet(boolean value) {
            if (!value) {
                this.ssb_params = null;
            }
        }

        @Nullable
        public String getTts_params() {
            return this.tts_params;
        }

        public tts_put_text_args setTts_params(@Nullable String tts_params) {
            this.tts_params = tts_params;
            return this;
        }

        public void unsetTts_params() {
            this.tts_params = null;
        }

        /**
         * Returns true if field tts_params is set (has been assigned a value) and false otherwise
         */
        public boolean isSetTts_params() {
            return this.tts_params != null;
        }

        public void setTts_paramsIsSet(boolean value) {
            if (!value) {
                this.tts_params = null;
            }
        }

        public void setFieldValue(_Fields field, @Nullable Object value) {
            switch (field) {
                case TEXT:
                    if (value == null) {
                        unsetText();
                    } else {
                        setText((String) value);
                    }
                    break;

                case SSB_PARAMS:
                    if (value == null) {
                        unsetSsb_params();
                    } else {
                        setSsb_params((String) value);
                    }
                    break;

                case TTS_PARAMS:
                    if (value == null) {
                        unsetTts_params();
                    } else {
                        setTts_params((String) value);
                    }
                    break;

            }
        }

        @Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case TEXT:
                    return getText();

                case SSB_PARAMS:
                    return getSsb_params();

                case TTS_PARAMS:
                    return getTts_params();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case TEXT:
                    return isSetText();
                case SSB_PARAMS:
                    return isSetSsb_params();
                case TTS_PARAMS:
                    return isSetTts_params();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof tts_put_text_args)
                return this.equals((tts_put_text_args) that);
            return false;
        }

        public boolean equals(tts_put_text_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_text = true && this.isSetText();
            boolean that_present_text = true && that.isSetText();
            if (this_present_text || that_present_text) {
                if (!(this_present_text && that_present_text))
                    return false;
                if (!this.text.equals(that.text))
                    return false;
            }

            boolean this_present_ssb_params = true && this.isSetSsb_params();
            boolean that_present_ssb_params = true && that.isSetSsb_params();
            if (this_present_ssb_params || that_present_ssb_params) {
                if (!(this_present_ssb_params && that_present_ssb_params))
                    return false;
                if (!this.ssb_params.equals(that.ssb_params))
                    return false;
            }

            boolean this_present_tts_params = true && this.isSetTts_params();
            boolean that_present_tts_params = true && that.isSetTts_params();
            if (this_present_tts_params || that_present_tts_params) {
                if (!(this_present_tts_params && that_present_tts_params))
                    return false;
                if (!this.tts_params.equals(that.tts_params))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
            if (isSetText())
                hashCode = hashCode * 8191 + text.hashCode();

            hashCode = hashCode * 8191 + ((isSetSsb_params()) ? 131071 : 524287);
            if (isSetSsb_params())
                hashCode = hashCode * 8191 + ssb_params.hashCode();

            hashCode = hashCode * 8191 + ((isSetTts_params()) ? 131071 : 524287);
            if (isSetTts_params())
                hashCode = hashCode * 8191 + tts_params.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(tts_put_text_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetText()).compareTo(other.isSetText());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetText()) {
                lastComparison = TBaseHelper.compareTo(this.text, other.text);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSsb_params()).compareTo(other.isSetSsb_params());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSsb_params()) {
                lastComparison = TBaseHelper.compareTo(this.ssb_params, other.ssb_params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetTts_params()).compareTo(other.isSetTts_params());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTts_params()) {
                lastComparison = TBaseHelper.compareTo(this.tts_params, other.tts_params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(TProtocol oprot) throws TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("tts_put_text_args(");
            boolean first = true;

            sb.append("text:");
            if (this.text == null) {
                sb.append("null");
            } else {
                sb.append(this.text);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ssb_params:");
            if (this.ssb_params == null) {
                sb.append("null");
            } else {
                sb.append(this.ssb_params);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("tts_params:");
            if (this.tts_params == null) {
                sb.append("null");
            } else {
                sb.append(this.tts_params);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new TCompactProtocol(new TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new TCompactProtocol(new TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            TEXT((short) 1, "text"),
            SSB_PARAMS((short) 2, "ssb_params"),
            TTS_PARAMS((short) 3, "tts_params");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // TEXT
                        return TEXT;
                    case 2: // SSB_PARAMS
                        return SSB_PARAMS;
                    case 3: // TTS_PARAMS
                        return TTS_PARAMS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class tts_put_text_argsStandardSchemeFactory implements SchemeFactory {
            public tts_put_text_argsStandardScheme getScheme() {
                return new tts_put_text_argsStandardScheme();
            }
        }

        private static class tts_put_text_argsStandardScheme extends StandardScheme<tts_put_text_args> {

            public void read(TProtocol iprot, tts_put_text_args struct) throws TException {
                TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // TEXT
                            if (schemeField.type == TType.STRING) {
                                struct.text = iprot.readString();
                                struct.setTextIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SSB_PARAMS
                            if (schemeField.type == TType.STRING) {
                                struct.ssb_params = iprot.readString();
                                struct.setSsb_paramsIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TTS_PARAMS
                            if (schemeField.type == TType.STRING) {
                                struct.tts_params = iprot.readString();
                                struct.setTts_paramsIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(TProtocol oprot, tts_put_text_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.text != null) {
                    oprot.writeFieldBegin(TEXT_FIELD_DESC);
                    oprot.writeString(struct.text);
                    oprot.writeFieldEnd();
                }
                if (struct.ssb_params != null) {
                    oprot.writeFieldBegin(SSB_PARAMS_FIELD_DESC);
                    oprot.writeString(struct.ssb_params);
                    oprot.writeFieldEnd();
                }
                if (struct.tts_params != null) {
                    oprot.writeFieldBegin(TTS_PARAMS_FIELD_DESC);
                    oprot.writeString(struct.tts_params);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class tts_put_text_argsTupleSchemeFactory implements SchemeFactory {
            public tts_put_text_argsTupleScheme getScheme() {
                return new tts_put_text_argsTupleScheme();
            }
        }

        private static class tts_put_text_argsTupleScheme extends TupleScheme<tts_put_text_args> {

            @Override
            public void write(TProtocol prot, tts_put_text_args struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetText()) {
                    optionals.set(0);
                }
                if (struct.isSetSsb_params()) {
                    optionals.set(1);
                }
                if (struct.isSetTts_params()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetText()) {
                    oprot.writeString(struct.text);
                }
                if (struct.isSetSsb_params()) {
                    oprot.writeString(struct.ssb_params);
                }
                if (struct.isSetTts_params()) {
                    oprot.writeString(struct.tts_params);
                }
            }

            @Override
            public void read(TProtocol prot, tts_put_text_args struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.text = iprot.readString();
                    struct.setTextIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ssb_params = iprot.readString();
                    struct.setSsb_paramsIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.tts_params = iprot.readString();
                    struct.setTts_paramsIsSet(true);
                }
            }
        }
    }

    public static class tts_put_text_result implements TBase<tts_put_text_result, tts_put_text_result._Fields>, Serializable, Cloneable, Comparable<tts_put_text_result> {
        public static final Map<_Fields, FieldMetaData> metaDataMap;
        private static final TStruct STRUCT_DESC = new TStruct("tts_put_text_result");
        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short) 0);
        private static final SchemeFactory STANDARD_SCHEME_FACTORY = new tts_put_text_resultStandardSchemeFactory();
        private static final SchemeFactory TUPLE_SCHEME_FACTORY = new tts_put_text_resultTupleSchemeFactory();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
                    new FieldValueMetaData(TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(tts_put_text_result.class, metaDataMap);
        }

        public int success; // required
        private byte __isset_bitfield = 0;

        public tts_put_text_result() {
        }

        public tts_put_text_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public tts_put_text_result(tts_put_text_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        private static <S extends IScheme> S scheme(TProtocol proto) {
            return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public tts_put_text_result deepCopy() {
            return new tts_put_text_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public tts_put_text_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @Nullable Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        @Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof tts_put_text_result)
                return this.equals((tts_put_text_result) that);
            return false;
        }

        public boolean equals(tts_put_text_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + success;

            return hashCode;
        }

        @Override
        public int compareTo(tts_put_text_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(TProtocol oprot) throws TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("tts_put_text_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new TCompactProtocol(new TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new TCompactProtocol(new TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class tts_put_text_resultStandardSchemeFactory implements SchemeFactory {
            public tts_put_text_resultStandardScheme getScheme() {
                return new tts_put_text_resultStandardScheme();
            }
        }

        private static class tts_put_text_resultStandardScheme extends StandardScheme<tts_put_text_result> {

            public void read(TProtocol iprot, tts_put_text_result struct) throws TException {
                TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(TProtocol oprot, tts_put_text_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class tts_put_text_resultTupleSchemeFactory implements SchemeFactory {
            public tts_put_text_resultTupleScheme getScheme() {
                return new tts_put_text_resultTupleScheme();
            }
        }

        private static class tts_put_text_resultTupleScheme extends TupleScheme<tts_put_text_result> {

            @Override
            public void write(TProtocol prot, tts_put_text_result struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(TProtocol prot, tts_put_text_result struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class tts_get_result_args implements TBase<tts_get_result_args, tts_get_result_args._Fields>, Serializable, Cloneable, Comparable<tts_get_result_args> {
        public static final Map<_Fields, FieldMetaData> metaDataMap;
        private static final TStruct STRUCT_DESC = new TStruct("tts_get_result_args");
        private static final SchemeFactory STANDARD_SCHEME_FACTORY = new tts_get_result_argsStandardSchemeFactory();
        private static final SchemeFactory TUPLE_SCHEME_FACTORY = new tts_get_result_argsTupleSchemeFactory();

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(tts_get_result_args.class, metaDataMap);
        }

        public tts_get_result_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public tts_get_result_args(tts_get_result_args other) {
        }

        private static <S extends IScheme> S scheme(TProtocol proto) {
            return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public tts_get_result_args deepCopy() {
            return new tts_get_result_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @Nullable Object value) {
            switch (field) {
            }
        }

        @Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof tts_get_result_args)
                return this.equals((tts_get_result_args) that);
            return false;
        }

        public boolean equals(tts_get_result_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(tts_get_result_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(TProtocol oprot) throws TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("tts_get_result_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new TCompactProtocol(new TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new TCompactProtocol(new TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class tts_get_result_argsStandardSchemeFactory implements SchemeFactory {
            public tts_get_result_argsStandardScheme getScheme() {
                return new tts_get_result_argsStandardScheme();
            }
        }

        private static class tts_get_result_argsStandardScheme extends StandardScheme<tts_get_result_args> {

            public void read(TProtocol iprot, tts_get_result_args struct) throws TException {
                TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(TProtocol oprot, tts_get_result_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class tts_get_result_argsTupleSchemeFactory implements SchemeFactory {
            public tts_get_result_argsTupleScheme getScheme() {
                return new tts_get_result_argsTupleScheme();
            }
        }

        private static class tts_get_result_argsTupleScheme extends TupleScheme<tts_get_result_args> {

            @Override
            public void write(TProtocol prot, tts_get_result_args struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(TProtocol prot, tts_get_result_args struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }
    }

    public static class tts_get_result_result implements TBase<tts_get_result_result, tts_get_result_result._Fields>, Serializable, Cloneable, Comparable<tts_get_result_result> {
        // isset id assignments
        public static final Map<_Fields, FieldMetaData> metaDataMap;
        private static final TStruct STRUCT_DESC = new TStruct("tts_get_result_result");
        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final SchemeFactory STANDARD_SCHEME_FACTORY = new tts_get_result_resultStandardSchemeFactory();
        private static final SchemeFactory TUPLE_SCHEME_FACTORY = new tts_get_result_resultTupleSchemeFactory();

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
                    new StructMetaData(TType.STRUCT, TTSResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(tts_get_result_result.class, metaDataMap);
        }

        public @Nullable
        TTSResult success; // required

        public tts_get_result_result() {
        }

        public tts_get_result_result(
                TTSResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public tts_get_result_result(tts_get_result_result other) {
            if (other.isSetSuccess()) {
                this.success = new TTSResult(other.success);
            }
        }

        private static <S extends IScheme> S scheme(TProtocol proto) {
            return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public tts_get_result_result deepCopy() {
            return new tts_get_result_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @Nullable
        public TTSResult getSuccess() {
            return this.success;
        }

        public tts_get_result_result setSuccess(@Nullable TTSResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @Nullable Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((TTSResult) value);
                    }
                    break;

            }
        }

        @Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof tts_get_result_result)
                return this.equals((tts_get_result_result) that);
            return false;
        }

        public boolean equals(tts_get_result_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(tts_get_result_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(TProtocol oprot) throws TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("tts_get_result_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new TCompactProtocol(new TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new TCompactProtocol(new TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class tts_get_result_resultStandardSchemeFactory implements SchemeFactory {
            public tts_get_result_resultStandardScheme getScheme() {
                return new tts_get_result_resultStandardScheme();
            }
        }

        private static class tts_get_result_resultStandardScheme extends StandardScheme<tts_get_result_result> {

            public void read(TProtocol iprot, tts_get_result_result struct) throws TException {
                TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == TType.STRUCT) {
                                struct.success = new TTSResult();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(TProtocol oprot, tts_get_result_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class tts_get_result_resultTupleSchemeFactory implements SchemeFactory {
            public tts_get_result_resultTupleScheme getScheme() {
                return new tts_get_result_resultTupleScheme();
            }
        }

        private static class tts_get_result_resultTupleScheme extends TupleScheme<tts_get_result_result> {

            @Override
            public void write(TProtocol prot, tts_get_result_result struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(TProtocol prot, tts_get_result_result struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new TTSResult();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

}
