/**
 * Autogenerated by Thrift Compiler (0.13.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.aiadver.api.thrift.tts;


import org.apache.thrift.*;
import org.apache.thrift.annotation.Nullable;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.transport.TIOStreamTransport;

import java.io.Serializable;
import java.nio.ByteBuffer;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-24")
public class TTSResult implements TBase<TTSResult, TTSResult._Fields>, Serializable, Cloneable, Comparable<TTSResult> {
    public static final Map<_Fields, FieldMetaData> metaDataMap;
    private static final TStruct STRUCT_DESC = new TStruct("TTSResult");
    private static final TField STATUS_CODE_FIELD_DESC = new TField("status_code", TType.I32, (short) 1);
    private static final TField SYNTH_STATUS_FIELD_DESC = new TField("synthStatus", TType.I32, (short) 2);
    private static final TField RESULT_FIELD_DESC = new TField("result", TType.STRING, (short) 3);
    private static final TField RESULT_LEN_FIELD_DESC = new TField("result_len", TType.I32, (short) 4);
    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new TTSResultStandardSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new TTSResultTupleSchemeFactory();
    // isset id assignments
    private static final int __STATUS_CODE_ISSET_ID = 0;
    private static final int __SYNTHSTATUS_ISSET_ID = 1;
    private static final int __RESULT_LEN_ISSET_ID = 2;

    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.STATUS_CODE, new FieldMetaData("status_code", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.I32)));
        tmpMap.put(_Fields.SYNTH_STATUS, new FieldMetaData("synthStatus", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.I32)));
        tmpMap.put(_Fields.RESULT, new FieldMetaData("result", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.STRING, true)));
        tmpMap.put(_Fields.RESULT_LEN, new FieldMetaData("result_len", TFieldRequirementType.DEFAULT,
                new FieldValueMetaData(TType.I32)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(TTSResult.class, metaDataMap);
    }

    public int status_code; // required
    public int synthStatus; // required
    public @Nullable
    ByteBuffer result; // required
    public int result_len; // required
    private byte __isset_bitfield = 0;

    public TTSResult() {
    }

    public TTSResult(
            int status_code,
            int synthStatus,
            ByteBuffer result,
            int result_len) {
        this();
        this.status_code = status_code;
        setStatus_codeIsSet(true);
        this.synthStatus = synthStatus;
        setSynthStatusIsSet(true);
        this.result = TBaseHelper.copyBinary(result);
        this.result_len = result_len;
        setResult_lenIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TTSResult(TTSResult other) {
        __isset_bitfield = other.__isset_bitfield;
        this.status_code = other.status_code;
        this.synthStatus = other.synthStatus;
        if (other.isSetResult()) {
            this.result = TBaseHelper.copyBinary(other.result);
        }
        this.result_len = other.result_len;
    }

    private static <S extends IScheme> S scheme(TProtocol proto) {
        return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }

    public TTSResult deepCopy() {
        return new TTSResult(this);
    }

    @Override
    public void clear() {
        setStatus_codeIsSet(false);
        this.status_code = 0;
        setSynthStatusIsSet(false);
        this.synthStatus = 0;
        this.result = null;
        setResult_lenIsSet(false);
        this.result_len = 0;
    }

    public int getStatus_code() {
        return this.status_code;
    }

    public TTSResult setStatus_code(int status_code) {
        this.status_code = status_code;
        setStatus_codeIsSet(true);
        return this;
    }

    public void unsetStatus_code() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_CODE_ISSET_ID);
    }

    /**
     * Returns true if field status_code is set (has been assigned a value) and false otherwise
     */
    public boolean isSetStatus_code() {
        return EncodingUtils.testBit(__isset_bitfield, __STATUS_CODE_ISSET_ID);
    }

    public void setStatus_codeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_CODE_ISSET_ID, value);
    }

    public int getSynthStatus() {
        return this.synthStatus;
    }

    public TTSResult setSynthStatus(int synthStatus) {
        this.synthStatus = synthStatus;
        setSynthStatusIsSet(true);
        return this;
    }

    public void unsetSynthStatus() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYNTHSTATUS_ISSET_ID);
    }

    /**
     * Returns true if field synthStatus is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSynthStatus() {
        return EncodingUtils.testBit(__isset_bitfield, __SYNTHSTATUS_ISSET_ID);
    }

    public void setSynthStatusIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYNTHSTATUS_ISSET_ID, value);
    }

    public byte[] getResult() {
        setResult(TBaseHelper.rightSize(result));
        return result == null ? null : result.array();
    }

    public TTSResult setResult(byte[] result) {
        this.result = result == null ? (ByteBuffer) null : ByteBuffer.wrap(result.clone());
        return this;
    }

    public TTSResult setResult(@Nullable ByteBuffer result) {
        this.result = TBaseHelper.copyBinary(result);
        return this;
    }

    public ByteBuffer bufferForResult() {
        return TBaseHelper.copyBinary(result);
    }

    public void unsetResult() {
        this.result = null;
    }

    /**
     * Returns true if field result is set (has been assigned a value) and false otherwise
     */
    public boolean isSetResult() {
        return this.result != null;
    }

    public void setResultIsSet(boolean value) {
        if (!value) {
            this.result = null;
        }
    }

    public int getResult_len() {
        return this.result_len;
    }

    public TTSResult setResult_len(int result_len) {
        this.result_len = result_len;
        setResult_lenIsSet(true);
        return this;
    }

    public void unsetResult_len() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULT_LEN_ISSET_ID);
    }

    /**
     * Returns true if field result_len is set (has been assigned a value) and false otherwise
     */
    public boolean isSetResult_len() {
        return EncodingUtils.testBit(__isset_bitfield, __RESULT_LEN_ISSET_ID);
    }

    public void setResult_lenIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULT_LEN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @Nullable Object value) {
        switch (field) {
            case STATUS_CODE:
                if (value == null) {
                    unsetStatus_code();
                } else {
                    setStatus_code((Integer) value);
                }
                break;

            case SYNTH_STATUS:
                if (value == null) {
                    unsetSynthStatus();
                } else {
                    setSynthStatus((Integer) value);
                }
                break;

            case RESULT:
                if (value == null) {
                    unsetResult();
                } else {
                    if (value instanceof byte[]) {
                        setResult((byte[]) value);
                    } else {
                        setResult((ByteBuffer) value);
                    }
                }
                break;

            case RESULT_LEN:
                if (value == null) {
                    unsetResult_len();
                } else {
                    setResult_len((Integer) value);
                }
                break;

        }
    }

    @Nullable
    public Object getFieldValue(_Fields field) {
        switch (field) {
            case STATUS_CODE:
                return getStatus_code();

            case SYNTH_STATUS:
                return getSynthStatus();

            case RESULT:
                return getResult();

            case RESULT_LEN:
                return getResult_len();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case STATUS_CODE:
                return isSetStatus_code();
            case SYNTH_STATUS:
                return isSetSynthStatus();
            case RESULT:
                return isSetResult();
            case RESULT_LEN:
                return isSetResult_len();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof TTSResult)
            return this.equals((TTSResult) that);
        return false;
    }

    public boolean equals(TTSResult that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_status_code = true;
        boolean that_present_status_code = true;
        if (this_present_status_code || that_present_status_code) {
            if (!(this_present_status_code && that_present_status_code))
                return false;
            if (this.status_code != that.status_code)
                return false;
        }

        boolean this_present_synthStatus = true;
        boolean that_present_synthStatus = true;
        if (this_present_synthStatus || that_present_synthStatus) {
            if (!(this_present_synthStatus && that_present_synthStatus))
                return false;
            if (this.synthStatus != that.synthStatus)
                return false;
        }

        boolean this_present_result = true && this.isSetResult();
        boolean that_present_result = true && that.isSetResult();
        if (this_present_result || that_present_result) {
            if (!(this_present_result && that_present_result))
                return false;
            if (!this.result.equals(that.result))
                return false;
        }

        boolean this_present_result_len = true;
        boolean that_present_result_len = true;
        if (this_present_result_len || that_present_result_len) {
            if (!(this_present_result_len && that_present_result_len))
                return false;
            if (this.result_len != that.result_len)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + status_code;

        hashCode = hashCode * 8191 + synthStatus;

        hashCode = hashCode * 8191 + ((isSetResult()) ? 131071 : 524287);
        if (isSetResult())
            hashCode = hashCode * 8191 + result.hashCode();

        hashCode = hashCode * 8191 + result_len;

        return hashCode;
    }

    @Override
    public int compareTo(TTSResult other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetStatus_code()).compareTo(other.isSetStatus_code());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStatus_code()) {
            lastComparison = TBaseHelper.compareTo(this.status_code, other.status_code);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSynthStatus()).compareTo(other.isSetSynthStatus());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSynthStatus()) {
            lastComparison = TBaseHelper.compareTo(this.synthStatus, other.synthStatus);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetResult()) {
            lastComparison = TBaseHelper.compareTo(this.result, other.result);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetResult_len()).compareTo(other.isSetResult_len());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetResult_len()) {
            lastComparison = TBaseHelper.compareTo(this.result_len, other.result_len);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TTSResult(");
        boolean first = true;

        sb.append("status_code:");
        sb.append(this.status_code);
        first = false;
        if (!first) sb.append(", ");
        sb.append("synthStatus:");
        sb.append(this.synthStatus);
        first = false;
        if (!first) sb.append(", ");
        sb.append("result:");
        if (this.result == null) {
            sb.append("null");
        } else {
            TBaseHelper.toString(this.result, sb);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("result_len:");
        sb.append(this.result_len);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new TCompactProtocol(new TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new TCompactProtocol(new TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        STATUS_CODE((short) 1, "status_code"),
        SYNTH_STATUS((short) 2, "synthStatus"),
        RESULT((short) 3, "result"),
        RESULT_LEN((short) 4, "result_len");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // STATUS_CODE
                    return STATUS_CODE;
                case 2: // SYNTH_STATUS
                    return SYNTH_STATUS;
                case 3: // RESULT
                    return RESULT;
                case 4: // RESULT_LEN
                    return RESULT_LEN;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @Nullable
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class TTSResultStandardSchemeFactory implements SchemeFactory {
        public TTSResultStandardScheme getScheme() {
            return new TTSResultStandardScheme();
        }
    }

    private static class TTSResultStandardScheme extends StandardScheme<TTSResult> {

        public void read(TProtocol iprot, TTSResult struct) throws TException {
            TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // STATUS_CODE
                        if (schemeField.type == TType.I32) {
                            struct.status_code = iprot.readI32();
                            struct.setStatus_codeIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // SYNTH_STATUS
                        if (schemeField.type == TType.I32) {
                            struct.synthStatus = iprot.readI32();
                            struct.setSynthStatusIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // RESULT
                        if (schemeField.type == TType.STRING) {
                            struct.result = iprot.readBinary();
                            struct.setResultIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // RESULT_LEN
                        if (schemeField.type == TType.I32) {
                            struct.result_len = iprot.readI32();
                            struct.setResult_lenIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(TProtocol oprot, TTSResult struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(STATUS_CODE_FIELD_DESC);
            oprot.writeI32(struct.status_code);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(SYNTH_STATUS_FIELD_DESC);
            oprot.writeI32(struct.synthStatus);
            oprot.writeFieldEnd();
            if (struct.result != null) {
                oprot.writeFieldBegin(RESULT_FIELD_DESC);
                oprot.writeBinary(struct.result);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(RESULT_LEN_FIELD_DESC);
            oprot.writeI32(struct.result_len);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TTSResultTupleSchemeFactory implements SchemeFactory {
        public TTSResultTupleScheme getScheme() {
            return new TTSResultTupleScheme();
        }
    }

    private static class TTSResultTupleScheme extends TupleScheme<TTSResult> {

        @Override
        public void write(TProtocol prot, TTSResult struct) throws TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetStatus_code()) {
                optionals.set(0);
            }
            if (struct.isSetSynthStatus()) {
                optionals.set(1);
            }
            if (struct.isSetResult()) {
                optionals.set(2);
            }
            if (struct.isSetResult_len()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetStatus_code()) {
                oprot.writeI32(struct.status_code);
            }
            if (struct.isSetSynthStatus()) {
                oprot.writeI32(struct.synthStatus);
            }
            if (struct.isSetResult()) {
                oprot.writeBinary(struct.result);
            }
            if (struct.isSetResult_len()) {
                oprot.writeI32(struct.result_len);
            }
        }

        @Override
        public void read(TProtocol prot, TTSResult struct) throws TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.status_code = iprot.readI32();
                struct.setStatus_codeIsSet(true);
            }
            if (incoming.get(1)) {
                struct.synthStatus = iprot.readI32();
                struct.setSynthStatusIsSet(true);
            }
            if (incoming.get(2)) {
                struct.result = iprot.readBinary();
                struct.setResultIsSet(true);
            }
            if (incoming.get(3)) {
                struct.result_len = iprot.readI32();
                struct.setResult_lenIsSet(true);
            }
        }
    }
}

