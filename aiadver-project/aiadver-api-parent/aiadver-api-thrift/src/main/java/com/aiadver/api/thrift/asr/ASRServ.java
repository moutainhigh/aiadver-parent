/**
 * Autogenerated by Thrift Compiler (0.13.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.aiadver.api.thrift.asr;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-24")
public class ASRServ {

    public interface Iface {

        public void asr_init(java.lang.String username, java.lang.String password, java.lang.String login_params) throws org.apache.thrift.TException;

        public int ASR_create_session(java.lang.String params, java.lang.String sessionid) throws org.apache.thrift.TException;

        public ASRWrite ASR_audio_write(java.nio.ByteBuffer text, int audioStaus) throws org.apache.thrift.TException;

        public ASRResult ASR_get_result() throws org.apache.thrift.TException;

        public int ASR_end_session() throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void asr_init(java.lang.String username, java.lang.String password, java.lang.String login_params, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void ASR_create_session(java.lang.String params, java.lang.String sessionid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

        public void ASR_audio_write(java.nio.ByteBuffer text, int audioStaus, org.apache.thrift.async.AsyncMethodCallback<ASRWrite> resultHandler) throws org.apache.thrift.TException;

        public void ASR_get_result(org.apache.thrift.async.AsyncMethodCallback<ASRResult> resultHandler) throws org.apache.thrift.TException;

        public void ASR_end_session(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void asr_init(java.lang.String username, java.lang.String password, java.lang.String login_params) throws org.apache.thrift.TException {
            send_asr_init(username, password, login_params);
            recv_asr_init();
        }

        public void send_asr_init(java.lang.String username, java.lang.String password, java.lang.String login_params) throws org.apache.thrift.TException {
            asr_init_args args = new asr_init_args();
            args.setUsername(username);
            args.setPassword(password);
            args.setLogin_params(login_params);
            sendBase("asr_init", args);
        }

        public void recv_asr_init() throws org.apache.thrift.TException {
            asr_init_result result = new asr_init_result();
            receiveBase(result, "asr_init");
            return;
        }

        public int ASR_create_session(java.lang.String params, java.lang.String sessionid) throws org.apache.thrift.TException {
            send_ASR_create_session(params, sessionid);
            return recv_ASR_create_session();
        }

        public void send_ASR_create_session(java.lang.String params, java.lang.String sessionid) throws org.apache.thrift.TException {
            ASR_create_session_args args = new ASR_create_session_args();
            args.setParams(params);
            args.setSessionid(sessionid);
            sendBase("ASR_create_session", args);
        }

        public int recv_ASR_create_session() throws org.apache.thrift.TException {
            ASR_create_session_result result = new ASR_create_session_result();
            receiveBase(result, "ASR_create_session");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ASR_create_session failed: unknown result");
        }

        public ASRWrite ASR_audio_write(java.nio.ByteBuffer text, int audioStaus) throws org.apache.thrift.TException {
            send_ASR_audio_write(text, audioStaus);
            return recv_ASR_audio_write();
        }

        public void send_ASR_audio_write(java.nio.ByteBuffer text, int audioStaus) throws org.apache.thrift.TException {
            ASR_audio_write_args args = new ASR_audio_write_args();
            args.setText(text);
            args.setAudioStaus(audioStaus);
            sendBase("ASR_audio_write", args);
        }

        public ASRWrite recv_ASR_audio_write() throws org.apache.thrift.TException {
            ASR_audio_write_result result = new ASR_audio_write_result();
            receiveBase(result, "ASR_audio_write");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ASR_audio_write failed: unknown result");
        }

        public ASRResult ASR_get_result() throws org.apache.thrift.TException {
            send_ASR_get_result();
            return recv_ASR_get_result();
        }

        public void send_ASR_get_result() throws org.apache.thrift.TException {
            ASR_get_result_args args = new ASR_get_result_args();
            sendBase("ASR_get_result", args);
        }

        public ASRResult recv_ASR_get_result() throws org.apache.thrift.TException {
            ASR_get_result_result result = new ASR_get_result_result();
            receiveBase(result, "ASR_get_result");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ASR_get_result failed: unknown result");
        }

        public int ASR_end_session() throws org.apache.thrift.TException {
            send_ASR_end_session();
            return recv_ASR_end_session();
        }

        public void send_ASR_end_session() throws org.apache.thrift.TException {
            ASR_end_session_args args = new ASR_end_session_args();
            sendBase("ASR_end_session", args);
        }

        public int recv_ASR_end_session() throws org.apache.thrift.TException {
            ASR_end_session_result result = new ASR_end_session_result();
            receiveBase(result, "ASR_end_session");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ASR_end_session failed: unknown result");
        }

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void asr_init(java.lang.String username, java.lang.String password, java.lang.String login_params, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            asr_init_call method_call = new asr_init_call(username, password, login_params, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void ASR_create_session(java.lang.String params, java.lang.String sessionid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ASR_create_session_call method_call = new ASR_create_session_call(params, sessionid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void ASR_audio_write(java.nio.ByteBuffer text, int audioStaus, org.apache.thrift.async.AsyncMethodCallback<ASRWrite> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ASR_audio_write_call method_call = new ASR_audio_write_call(text, audioStaus, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void ASR_get_result(org.apache.thrift.async.AsyncMethodCallback<ASRResult> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ASR_get_result_call method_call = new ASR_get_result_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void ASR_end_session(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ASR_end_session_call method_call = new ASR_end_session_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public static class asr_init_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String username;
            private java.lang.String password;
            private java.lang.String login_params;

            public asr_init_call(java.lang.String username, java.lang.String password, java.lang.String login_params, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.username = username;
                this.password = password;
                this.login_params = login_params;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("asr_init", org.apache.thrift.protocol.TMessageType.CALL, 0));
                asr_init_args args = new asr_init_args();
                args.setUsername(username);
                args.setPassword(password);
                args.setLogin_params(login_params);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public static class ASR_create_session_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
            private java.lang.String params;
            private java.lang.String sessionid;

            public ASR_create_session_call(java.lang.String params, java.lang.String sessionid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.params = params;
                this.sessionid = sessionid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ASR_create_session", org.apache.thrift.protocol.TMessageType.CALL, 0));
                ASR_create_session_args args = new ASR_create_session_args();
                args.setParams(params);
                args.setSessionid(sessionid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Integer getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_ASR_create_session();
            }
        }

        public static class ASR_audio_write_call extends org.apache.thrift.async.TAsyncMethodCall<ASRWrite> {
            private java.nio.ByteBuffer text;
            private int audioStaus;

            public ASR_audio_write_call(java.nio.ByteBuffer text, int audioStaus, org.apache.thrift.async.AsyncMethodCallback<ASRWrite> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.text = text;
                this.audioStaus = audioStaus;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ASR_audio_write", org.apache.thrift.protocol.TMessageType.CALL, 0));
                ASR_audio_write_args args = new ASR_audio_write_args();
                args.setText(text);
                args.setAudioStaus(audioStaus);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ASRWrite getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_ASR_audio_write();
            }
        }

        public static class ASR_get_result_call extends org.apache.thrift.async.TAsyncMethodCall<ASRResult> {
            public ASR_get_result_call(org.apache.thrift.async.AsyncMethodCallback<ASRResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ASR_get_result", org.apache.thrift.protocol.TMessageType.CALL, 0));
                ASR_get_result_args args = new ASR_get_result_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ASRResult getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_ASR_get_result();
            }
        }

        public static class ASR_end_session_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
            public ASR_end_session_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ASR_end_session", org.apache.thrift.protocol.TMessageType.CALL, 0));
                ASR_end_session_args args = new ASR_end_session_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.Integer getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_ASR_end_session();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("asr_init", new asr_init());
            processMap.put("ASR_create_session", new ASR_create_session());
            processMap.put("ASR_audio_write", new ASR_audio_write());
            processMap.put("ASR_get_result", new ASR_get_result());
            processMap.put("ASR_end_session", new ASR_end_session());
            return processMap;
        }

        public static class asr_init<I extends Iface> extends org.apache.thrift.ProcessFunction<I, asr_init_args> {
            public asr_init() {
                super("asr_init");
            }

            public asr_init_args getEmptyArgsInstance() {
                return new asr_init_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public asr_init_result getResult(I iface, asr_init_args args) throws org.apache.thrift.TException {
                asr_init_result result = new asr_init_result();
                iface.asr_init(args.username, args.password, args.login_params);
                return result;
            }
        }

        public static class ASR_create_session<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ASR_create_session_args> {
            public ASR_create_session() {
                super("ASR_create_session");
            }

            public ASR_create_session_args getEmptyArgsInstance() {
                return new ASR_create_session_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public ASR_create_session_result getResult(I iface, ASR_create_session_args args) throws org.apache.thrift.TException {
                ASR_create_session_result result = new ASR_create_session_result();
                result.success = iface.ASR_create_session(args.params, args.sessionid);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class ASR_audio_write<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ASR_audio_write_args> {
            public ASR_audio_write() {
                super("ASR_audio_write");
            }

            public ASR_audio_write_args getEmptyArgsInstance() {
                return new ASR_audio_write_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public ASR_audio_write_result getResult(I iface, ASR_audio_write_args args) throws org.apache.thrift.TException {
                ASR_audio_write_result result = new ASR_audio_write_result();
                result.success = iface.ASR_audio_write(args.text, args.audioStaus);
                return result;
            }
        }

        public static class ASR_get_result<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ASR_get_result_args> {
            public ASR_get_result() {
                super("ASR_get_result");
            }

            public ASR_get_result_args getEmptyArgsInstance() {
                return new ASR_get_result_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public ASR_get_result_result getResult(I iface, ASR_get_result_args args) throws org.apache.thrift.TException {
                ASR_get_result_result result = new ASR_get_result_result();
                result.success = iface.ASR_get_result();
                return result;
            }
        }

        public static class ASR_end_session<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ASR_end_session_args> {
            public ASR_end_session() {
                super("ASR_end_session");
            }

            public ASR_end_session_args getEmptyArgsInstance() {
                return new ASR_end_session_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public ASR_end_session_result getResult(I iface, ASR_end_session_args args) throws org.apache.thrift.TException {
                ASR_end_session_result result = new ASR_end_session_result();
                result.success = iface.ASR_end_session();
                result.setSuccessIsSet(true);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("asr_init", new asr_init());
            processMap.put("ASR_create_session", new ASR_create_session());
            processMap.put("ASR_audio_write", new ASR_audio_write());
            processMap.put("ASR_get_result", new ASR_get_result());
            processMap.put("ASR_end_session", new ASR_end_session());
            return processMap;
        }

        public static class asr_init<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, asr_init_args, Void> {
            public asr_init() {
                super("asr_init");
            }

            public asr_init_args getEmptyArgsInstance() {
                return new asr_init_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        asr_init_result result = new asr_init_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        asr_init_result result = new asr_init_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, asr_init_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.asr_init(args.username, args.password, args.login_params, resultHandler);
            }
        }

        public static class ASR_create_session<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ASR_create_session_args, java.lang.Integer> {
            public ASR_create_session() {
                super("ASR_create_session");
            }

            public ASR_create_session_args getEmptyArgsInstance() {
                return new ASR_create_session_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
                    public void onComplete(java.lang.Integer o) {
                        ASR_create_session_result result = new ASR_create_session_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        ASR_create_session_result result = new ASR_create_session_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, ASR_create_session_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
                iface.ASR_create_session(args.params, args.sessionid, resultHandler);
            }
        }

        public static class ASR_audio_write<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ASR_audio_write_args, ASRWrite> {
            public ASR_audio_write() {
                super("ASR_audio_write");
            }

            public ASR_audio_write_args getEmptyArgsInstance() {
                return new ASR_audio_write_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<ASRWrite> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<ASRWrite>() {
                    public void onComplete(ASRWrite o) {
                        ASR_audio_write_result result = new ASR_audio_write_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        ASR_audio_write_result result = new ASR_audio_write_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, ASR_audio_write_args args, org.apache.thrift.async.AsyncMethodCallback<ASRWrite> resultHandler) throws org.apache.thrift.TException {
                iface.ASR_audio_write(args.text, args.audioStaus, resultHandler);
            }
        }

        public static class ASR_get_result<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ASR_get_result_args, ASRResult> {
            public ASR_get_result() {
                super("ASR_get_result");
            }

            public ASR_get_result_args getEmptyArgsInstance() {
                return new ASR_get_result_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<ASRResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<ASRResult>() {
                    public void onComplete(ASRResult o) {
                        ASR_get_result_result result = new ASR_get_result_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        ASR_get_result_result result = new ASR_get_result_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, ASR_get_result_args args, org.apache.thrift.async.AsyncMethodCallback<ASRResult> resultHandler) throws org.apache.thrift.TException {
                iface.ASR_get_result(resultHandler);
            }
        }

        public static class ASR_end_session<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ASR_end_session_args, java.lang.Integer> {
            public ASR_end_session() {
                super("ASR_end_session");
            }

            public ASR_end_session_args getEmptyArgsInstance() {
                return new ASR_end_session_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
                    public void onComplete(java.lang.Integer o) {
                        ASR_end_session_result result = new ASR_end_session_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        ASR_end_session_result result = new ASR_end_session_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, ASR_end_session_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
                iface.ASR_end_session(resultHandler);
            }
        }

    }

    public static class asr_init_args implements org.apache.thrift.TBase<asr_init_args, asr_init_args._Fields>, java.io.Serializable, Cloneable, Comparable<asr_init_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asr_init_args");
        private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField LOGIN_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("login_params", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new asr_init_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new asr_init_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.LOGIN_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("login_params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asr_init_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        java.lang.String username; // required
        public @org.apache.thrift.annotation.Nullable
        java.lang.String password; // required
        public @org.apache.thrift.annotation.Nullable
        java.lang.String login_params; // required

        public asr_init_args() {
        }

        public asr_init_args(
                java.lang.String username,
                java.lang.String password,
                java.lang.String login_params) {
            this();
            this.username = username;
            this.password = password;
            this.login_params = login_params;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public asr_init_args(asr_init_args other) {
            if (other.isSetUsername()) {
                this.username = other.username;
            }
            if (other.isSetPassword()) {
                this.password = other.password;
            }
            if (other.isSetLogin_params()) {
                this.login_params = other.login_params;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public asr_init_args deepCopy() {
            return new asr_init_args(this);
        }

        @Override
        public void clear() {
            this.username = null;
            this.password = null;
            this.login_params = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUsername() {
            return this.username;
        }

        public asr_init_args setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
            this.username = username;
            return this;
        }

        public void unsetUsername() {
            this.username = null;
        }

        /**
         * Returns true if field username is set (has been assigned a value) and false otherwise
         */
        public boolean isSetUsername() {
            return this.username != null;
        }

        public void setUsernameIsSet(boolean value) {
            if (!value) {
                this.username = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getPassword() {
            return this.password;
        }

        public asr_init_args setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
            this.password = password;
            return this;
        }

        public void unsetPassword() {
            this.password = null;
        }

        /**
         * Returns true if field password is set (has been assigned a value) and false otherwise
         */
        public boolean isSetPassword() {
            return this.password != null;
        }

        public void setPasswordIsSet(boolean value) {
            if (!value) {
                this.password = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getLogin_params() {
            return this.login_params;
        }

        public asr_init_args setLogin_params(@org.apache.thrift.annotation.Nullable java.lang.String login_params) {
            this.login_params = login_params;
            return this;
        }

        public void unsetLogin_params() {
            this.login_params = null;
        }

        /**
         * Returns true if field login_params is set (has been assigned a value) and false otherwise
         */
        public boolean isSetLogin_params() {
            return this.login_params != null;
        }

        public void setLogin_paramsIsSet(boolean value) {
            if (!value) {
                this.login_params = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case USERNAME:
                    if (value == null) {
                        unsetUsername();
                    } else {
                        setUsername((java.lang.String) value);
                    }
                    break;

                case PASSWORD:
                    if (value == null) {
                        unsetPassword();
                    } else {
                        setPassword((java.lang.String) value);
                    }
                    break;

                case LOGIN_PARAMS:
                    if (value == null) {
                        unsetLogin_params();
                    } else {
                        setLogin_params((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USERNAME:
                    return getUsername();

                case PASSWORD:
                    return getPassword();

                case LOGIN_PARAMS:
                    return getLogin_params();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USERNAME:
                    return isSetUsername();
                case PASSWORD:
                    return isSetPassword();
                case LOGIN_PARAMS:
                    return isSetLogin_params();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof asr_init_args)
                return this.equals((asr_init_args) that);
            return false;
        }

        public boolean equals(asr_init_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_username = true && this.isSetUsername();
            boolean that_present_username = true && that.isSetUsername();
            if (this_present_username || that_present_username) {
                if (!(this_present_username && that_present_username))
                    return false;
                if (!this.username.equals(that.username))
                    return false;
            }

            boolean this_present_password = true && this.isSetPassword();
            boolean that_present_password = true && that.isSetPassword();
            if (this_present_password || that_present_password) {
                if (!(this_present_password && that_present_password))
                    return false;
                if (!this.password.equals(that.password))
                    return false;
            }

            boolean this_present_login_params = true && this.isSetLogin_params();
            boolean that_present_login_params = true && that.isSetLogin_params();
            if (this_present_login_params || that_present_login_params) {
                if (!(this_present_login_params && that_present_login_params))
                    return false;
                if (!this.login_params.equals(that.login_params))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
            if (isSetUsername())
                hashCode = hashCode * 8191 + username.hashCode();

            hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
            if (isSetPassword())
                hashCode = hashCode * 8191 + password.hashCode();

            hashCode = hashCode * 8191 + ((isSetLogin_params()) ? 131071 : 524287);
            if (isSetLogin_params())
                hashCode = hashCode * 8191 + login_params.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(asr_init_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsername()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPassword()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetLogin_params()).compareTo(other.isSetLogin_params());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLogin_params()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.login_params, other.login_params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("asr_init_args(");
            boolean first = true;

            sb.append("username:");
            if (this.username == null) {
                sb.append("null");
            } else {
                sb.append(this.username);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("password:");
            if (this.password == null) {
                sb.append("null");
            } else {
                sb.append(this.password);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("login_params:");
            if (this.login_params == null) {
                sb.append("null");
            } else {
                sb.append(this.login_params);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USERNAME((short) 1, "username"),
            PASSWORD((short) 2, "password"),
            LOGIN_PARAMS((short) 3, "login_params");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USERNAME
                        return USERNAME;
                    case 2: // PASSWORD
                        return PASSWORD;
                    case 3: // LOGIN_PARAMS
                        return LOGIN_PARAMS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class asr_init_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asr_init_argsStandardScheme getScheme() {
                return new asr_init_argsStandardScheme();
            }
        }

        private static class asr_init_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<asr_init_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, asr_init_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USERNAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.username = iprot.readString();
                                struct.setUsernameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PASSWORD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.password = iprot.readString();
                                struct.setPasswordIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // LOGIN_PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.login_params = iprot.readString();
                                struct.setLogin_paramsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, asr_init_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.username != null) {
                    oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                    oprot.writeString(struct.username);
                    oprot.writeFieldEnd();
                }
                if (struct.password != null) {
                    oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
                    oprot.writeString(struct.password);
                    oprot.writeFieldEnd();
                }
                if (struct.login_params != null) {
                    oprot.writeFieldBegin(LOGIN_PARAMS_FIELD_DESC);
                    oprot.writeString(struct.login_params);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class asr_init_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asr_init_argsTupleScheme getScheme() {
                return new asr_init_argsTupleScheme();
            }
        }

        private static class asr_init_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<asr_init_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, asr_init_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUsername()) {
                    optionals.set(0);
                }
                if (struct.isSetPassword()) {
                    optionals.set(1);
                }
                if (struct.isSetLogin_params()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUsername()) {
                    oprot.writeString(struct.username);
                }
                if (struct.isSetPassword()) {
                    oprot.writeString(struct.password);
                }
                if (struct.isSetLogin_params()) {
                    oprot.writeString(struct.login_params);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, asr_init_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.username = iprot.readString();
                    struct.setUsernameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.password = iprot.readString();
                    struct.setPasswordIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.login_params = iprot.readString();
                    struct.setLogin_paramsIsSet(true);
                }
            }
        }
    }

    public static class asr_init_result implements org.apache.thrift.TBase<asr_init_result, asr_init_result._Fields>, java.io.Serializable, Cloneable, Comparable<asr_init_result> {
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("asr_init_result");
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new asr_init_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new asr_init_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(asr_init_result.class, metaDataMap);
        }

        public asr_init_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public asr_init_result(asr_init_result other) {
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public asr_init_result deepCopy() {
            return new asr_init_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof asr_init_result)
                return this.equals((asr_init_result) that);
            return false;
        }

        public boolean equals(asr_init_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(asr_init_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("asr_init_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class asr_init_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asr_init_resultStandardScheme getScheme() {
                return new asr_init_resultStandardScheme();
            }
        }

        private static class asr_init_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<asr_init_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, asr_init_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, asr_init_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class asr_init_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public asr_init_resultTupleScheme getScheme() {
                return new asr_init_resultTupleScheme();
            }
        }

        private static class asr_init_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<asr_init_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, asr_init_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, asr_init_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }
    }

    public static class ASR_create_session_args implements org.apache.thrift.TBase<ASR_create_session_args, ASR_create_session_args._Fields>, java.io.Serializable, Cloneable, Comparable<ASR_create_session_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ASR_create_session_args");
        private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField SESSIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionid", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ASR_create_session_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ASR_create_session_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SESSIONID, new org.apache.thrift.meta_data.FieldMetaData("sessionid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ASR_create_session_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        java.lang.String params; // required
        public @org.apache.thrift.annotation.Nullable
        java.lang.String sessionid; // required

        public ASR_create_session_args() {
        }

        public ASR_create_session_args(
                java.lang.String params,
                java.lang.String sessionid) {
            this();
            this.params = params;
            this.sessionid = sessionid;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ASR_create_session_args(ASR_create_session_args other) {
            if (other.isSetParams()) {
                this.params = other.params;
            }
            if (other.isSetSessionid()) {
                this.sessionid = other.sessionid;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public ASR_create_session_args deepCopy() {
            return new ASR_create_session_args(this);
        }

        @Override
        public void clear() {
            this.params = null;
            this.sessionid = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getParams() {
            return this.params;
        }

        public ASR_create_session_args setParams(@org.apache.thrift.annotation.Nullable java.lang.String params) {
            this.params = params;
            return this;
        }

        public void unsetParams() {
            this.params = null;
        }

        /**
         * Returns true if field params is set (has been assigned a value) and false otherwise
         */
        public boolean isSetParams() {
            return this.params != null;
        }

        public void setParamsIsSet(boolean value) {
            if (!value) {
                this.params = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSessionid() {
            return this.sessionid;
        }

        public ASR_create_session_args setSessionid(@org.apache.thrift.annotation.Nullable java.lang.String sessionid) {
            this.sessionid = sessionid;
            return this;
        }

        public void unsetSessionid() {
            this.sessionid = null;
        }

        /**
         * Returns true if field sessionid is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSessionid() {
            return this.sessionid != null;
        }

        public void setSessionidIsSet(boolean value) {
            if (!value) {
                this.sessionid = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case PARAMS:
                    if (value == null) {
                        unsetParams();
                    } else {
                        setParams((java.lang.String) value);
                    }
                    break;

                case SESSIONID:
                    if (value == null) {
                        unsetSessionid();
                    } else {
                        setSessionid((java.lang.String) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case PARAMS:
                    return getParams();

                case SESSIONID:
                    return getSessionid();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case PARAMS:
                    return isSetParams();
                case SESSIONID:
                    return isSetSessionid();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ASR_create_session_args)
                return this.equals((ASR_create_session_args) that);
            return false;
        }

        public boolean equals(ASR_create_session_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_params = true && this.isSetParams();
            boolean that_present_params = true && that.isSetParams();
            if (this_present_params || that_present_params) {
                if (!(this_present_params && that_present_params))
                    return false;
                if (!this.params.equals(that.params))
                    return false;
            }

            boolean this_present_sessionid = true && this.isSetSessionid();
            boolean that_present_sessionid = true && that.isSetSessionid();
            if (this_present_sessionid || that_present_sessionid) {
                if (!(this_present_sessionid && that_present_sessionid))
                    return false;
                if (!this.sessionid.equals(that.sessionid))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
            if (isSetParams())
                hashCode = hashCode * 8191 + params.hashCode();

            hashCode = hashCode * 8191 + ((isSetSessionid()) ? 131071 : 524287);
            if (isSetSessionid())
                hashCode = hashCode * 8191 + sessionid.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ASR_create_session_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParams()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetSessionid()).compareTo(other.isSetSessionid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSessionid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionid, other.sessionid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ASR_create_session_args(");
            boolean first = true;

            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            } else {
                sb.append(this.params);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("sessionid:");
            if (this.sessionid == null) {
                sb.append("null");
            } else {
                sb.append(this.sessionid);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PARAMS((short) 1, "params"),
            SESSIONID((short) 2, "sessionid");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PARAMS
                        return PARAMS;
                    case 2: // SESSIONID
                        return SESSIONID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class ASR_create_session_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_create_session_argsStandardScheme getScheme() {
                return new ASR_create_session_argsStandardScheme();
            }
        }

        private static class ASR_create_session_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ASR_create_session_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ASR_create_session_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PARAMS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.params = iprot.readString();
                                struct.setParamsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SESSIONID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.sessionid = iprot.readString();
                                struct.setSessionidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ASR_create_session_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.params != null) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    oprot.writeString(struct.params);
                    oprot.writeFieldEnd();
                }
                if (struct.sessionid != null) {
                    oprot.writeFieldBegin(SESSIONID_FIELD_DESC);
                    oprot.writeString(struct.sessionid);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ASR_create_session_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_create_session_argsTupleScheme getScheme() {
                return new ASR_create_session_argsTupleScheme();
            }
        }

        private static class ASR_create_session_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ASR_create_session_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ASR_create_session_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetParams()) {
                    optionals.set(0);
                }
                if (struct.isSetSessionid()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetParams()) {
                    oprot.writeString(struct.params);
                }
                if (struct.isSetSessionid()) {
                    oprot.writeString(struct.sessionid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ASR_create_session_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.params = iprot.readString();
                    struct.setParamsIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.sessionid = iprot.readString();
                    struct.setSessionidIsSet(true);
                }
            }
        }
    }

    public static class ASR_create_session_result implements org.apache.thrift.TBase<ASR_create_session_result, ASR_create_session_result._Fields>, java.io.Serializable, Cloneable, Comparable<ASR_create_session_result> {
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ASR_create_session_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ASR_create_session_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ASR_create_session_resultTupleSchemeFactory();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ASR_create_session_result.class, metaDataMap);
        }

        public int success; // required
        private byte __isset_bitfield = 0;

        public ASR_create_session_result() {
        }

        public ASR_create_session_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ASR_create_session_result(ASR_create_session_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public ASR_create_session_result deepCopy() {
            return new ASR_create_session_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public ASR_create_session_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ASR_create_session_result)
                return this.equals((ASR_create_session_result) that);
            return false;
        }

        public boolean equals(ASR_create_session_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + success;

            return hashCode;
        }

        @Override
        public int compareTo(ASR_create_session_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ASR_create_session_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class ASR_create_session_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_create_session_resultStandardScheme getScheme() {
                return new ASR_create_session_resultStandardScheme();
            }
        }

        private static class ASR_create_session_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ASR_create_session_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ASR_create_session_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ASR_create_session_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ASR_create_session_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_create_session_resultTupleScheme getScheme() {
                return new ASR_create_session_resultTupleScheme();
            }
        }

        private static class ASR_create_session_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ASR_create_session_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ASR_create_session_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ASR_create_session_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class ASR_audio_write_args implements org.apache.thrift.TBase<ASR_audio_write_args, ASR_audio_write_args._Fields>, java.io.Serializable, Cloneable, Comparable<ASR_audio_write_args> {
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ASR_audio_write_args");
        private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField AUDIO_STAUS_FIELD_DESC = new org.apache.thrift.protocol.TField("audioStaus", org.apache.thrift.protocol.TType.I32, (short) 2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ASR_audio_write_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ASR_audio_write_argsTupleSchemeFactory();
        // isset id assignments
        private static final int __AUDIOSTAUS_ISSET_ID = 0;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
            tmpMap.put(_Fields.AUDIO_STAUS, new org.apache.thrift.meta_data.FieldMetaData("audioStaus", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ASR_audio_write_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        java.nio.ByteBuffer text; // required
        public int audioStaus; // required
        private byte __isset_bitfield = 0;

        public ASR_audio_write_args() {
        }

        public ASR_audio_write_args(
                java.nio.ByteBuffer text,
                int audioStaus) {
            this();
            this.text = org.apache.thrift.TBaseHelper.copyBinary(text);
            this.audioStaus = audioStaus;
            setAudioStausIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ASR_audio_write_args(ASR_audio_write_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetText()) {
                this.text = org.apache.thrift.TBaseHelper.copyBinary(other.text);
            }
            this.audioStaus = other.audioStaus;
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public ASR_audio_write_args deepCopy() {
            return new ASR_audio_write_args(this);
        }

        @Override
        public void clear() {
            this.text = null;
            setAudioStausIsSet(false);
            this.audioStaus = 0;
        }

        public byte[] getText() {
            setText(org.apache.thrift.TBaseHelper.rightSize(text));
            return text == null ? null : text.array();
        }

        public ASR_audio_write_args setText(byte[] text) {
            this.text = text == null ? (java.nio.ByteBuffer) null : java.nio.ByteBuffer.wrap(text.clone());
            return this;
        }

        public ASR_audio_write_args setText(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer text) {
            this.text = org.apache.thrift.TBaseHelper.copyBinary(text);
            return this;
        }

        public java.nio.ByteBuffer bufferForText() {
            return org.apache.thrift.TBaseHelper.copyBinary(text);
        }

        public void unsetText() {
            this.text = null;
        }

        /**
         * Returns true if field text is set (has been assigned a value) and false otherwise
         */
        public boolean isSetText() {
            return this.text != null;
        }

        public void setTextIsSet(boolean value) {
            if (!value) {
                this.text = null;
            }
        }

        public int getAudioStaus() {
            return this.audioStaus;
        }

        public ASR_audio_write_args setAudioStaus(int audioStaus) {
            this.audioStaus = audioStaus;
            setAudioStausIsSet(true);
            return this;
        }

        public void unsetAudioStaus() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUDIOSTAUS_ISSET_ID);
        }

        /**
         * Returns true if field audioStaus is set (has been assigned a value) and false otherwise
         */
        public boolean isSetAudioStaus() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUDIOSTAUS_ISSET_ID);
        }

        public void setAudioStausIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUDIOSTAUS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case TEXT:
                    if (value == null) {
                        unsetText();
                    } else {
                        if (value instanceof byte[]) {
                            setText((byte[]) value);
                        } else {
                            setText((java.nio.ByteBuffer) value);
                        }
                    }
                    break;

                case AUDIO_STAUS:
                    if (value == null) {
                        unsetAudioStaus();
                    } else {
                        setAudioStaus((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case TEXT:
                    return getText();

                case AUDIO_STAUS:
                    return getAudioStaus();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case TEXT:
                    return isSetText();
                case AUDIO_STAUS:
                    return isSetAudioStaus();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ASR_audio_write_args)
                return this.equals((ASR_audio_write_args) that);
            return false;
        }

        public boolean equals(ASR_audio_write_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_text = true && this.isSetText();
            boolean that_present_text = true && that.isSetText();
            if (this_present_text || that_present_text) {
                if (!(this_present_text && that_present_text))
                    return false;
                if (!this.text.equals(that.text))
                    return false;
            }

            boolean this_present_audioStaus = true;
            boolean that_present_audioStaus = true;
            if (this_present_audioStaus || that_present_audioStaus) {
                if (!(this_present_audioStaus && that_present_audioStaus))
                    return false;
                if (this.audioStaus != that.audioStaus)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
            if (isSetText())
                hashCode = hashCode * 8191 + text.hashCode();

            hashCode = hashCode * 8191 + audioStaus;

            return hashCode;
        }

        @Override
        public int compareTo(ASR_audio_write_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetText()).compareTo(other.isSetText());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetText()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetAudioStaus()).compareTo(other.isSetAudioStaus());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAudioStaus()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioStaus, other.audioStaus);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ASR_audio_write_args(");
            boolean first = true;

            sb.append("text:");
            if (this.text == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.text, sb);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("audioStaus:");
            sb.append(this.audioStaus);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            TEXT((short) 1, "text"),
            AUDIO_STAUS((short) 2, "audioStaus");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // TEXT
                        return TEXT;
                    case 2: // AUDIO_STAUS
                        return AUDIO_STAUS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class ASR_audio_write_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_audio_write_argsStandardScheme getScheme() {
                return new ASR_audio_write_argsStandardScheme();
            }
        }

        private static class ASR_audio_write_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ASR_audio_write_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ASR_audio_write_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // TEXT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.text = iprot.readBinary();
                                struct.setTextIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // AUDIO_STAUS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.audioStaus = iprot.readI32();
                                struct.setAudioStausIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ASR_audio_write_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.text != null) {
                    oprot.writeFieldBegin(TEXT_FIELD_DESC);
                    oprot.writeBinary(struct.text);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(AUDIO_STAUS_FIELD_DESC);
                oprot.writeI32(struct.audioStaus);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ASR_audio_write_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_audio_write_argsTupleScheme getScheme() {
                return new ASR_audio_write_argsTupleScheme();
            }
        }

        private static class ASR_audio_write_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ASR_audio_write_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ASR_audio_write_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetText()) {
                    optionals.set(0);
                }
                if (struct.isSetAudioStaus()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetText()) {
                    oprot.writeBinary(struct.text);
                }
                if (struct.isSetAudioStaus()) {
                    oprot.writeI32(struct.audioStaus);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ASR_audio_write_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.text = iprot.readBinary();
                    struct.setTextIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.audioStaus = iprot.readI32();
                    struct.setAudioStausIsSet(true);
                }
            }
        }
    }

    public static class ASR_audio_write_result implements org.apache.thrift.TBase<ASR_audio_write_result, ASR_audio_write_result._Fields>, java.io.Serializable, Cloneable, Comparable<ASR_audio_write_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ASR_audio_write_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ASR_audio_write_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ASR_audio_write_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ASRWrite.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ASR_audio_write_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        ASRWrite success; // required

        public ASR_audio_write_result() {
        }

        public ASR_audio_write_result(
                ASRWrite success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ASR_audio_write_result(ASR_audio_write_result other) {
            if (other.isSetSuccess()) {
                this.success = new ASRWrite(other.success);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public ASR_audio_write_result deepCopy() {
            return new ASR_audio_write_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public ASRWrite getSuccess() {
            return this.success;
        }

        public ASR_audio_write_result setSuccess(@org.apache.thrift.annotation.Nullable ASRWrite success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((ASRWrite) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ASR_audio_write_result)
                return this.equals((ASR_audio_write_result) that);
            return false;
        }

        public boolean equals(ASR_audio_write_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ASR_audio_write_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ASR_audio_write_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class ASR_audio_write_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_audio_write_resultStandardScheme getScheme() {
                return new ASR_audio_write_resultStandardScheme();
            }
        }

        private static class ASR_audio_write_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ASR_audio_write_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ASR_audio_write_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new ASRWrite();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ASR_audio_write_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ASR_audio_write_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_audio_write_resultTupleScheme getScheme() {
                return new ASR_audio_write_resultTupleScheme();
            }
        }

        private static class ASR_audio_write_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ASR_audio_write_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ASR_audio_write_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ASR_audio_write_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new ASRWrite();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class ASR_get_result_args implements org.apache.thrift.TBase<ASR_get_result_args, ASR_get_result_args._Fields>, java.io.Serializable, Cloneable, Comparable<ASR_get_result_args> {
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ASR_get_result_args");
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ASR_get_result_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ASR_get_result_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ASR_get_result_args.class, metaDataMap);
        }

        public ASR_get_result_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ASR_get_result_args(ASR_get_result_args other) {
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public ASR_get_result_args deepCopy() {
            return new ASR_get_result_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ASR_get_result_args)
                return this.equals((ASR_get_result_args) that);
            return false;
        }

        public boolean equals(ASR_get_result_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(ASR_get_result_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ASR_get_result_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class ASR_get_result_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_get_result_argsStandardScheme getScheme() {
                return new ASR_get_result_argsStandardScheme();
            }
        }

        private static class ASR_get_result_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ASR_get_result_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ASR_get_result_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ASR_get_result_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ASR_get_result_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_get_result_argsTupleScheme getScheme() {
                return new ASR_get_result_argsTupleScheme();
            }
        }

        private static class ASR_get_result_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ASR_get_result_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ASR_get_result_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ASR_get_result_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }
    }

    public static class ASR_get_result_result implements org.apache.thrift.TBase<ASR_get_result_result, ASR_get_result_result._Fields>, java.io.Serializable, Cloneable, Comparable<ASR_get_result_result> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ASR_get_result_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ASR_get_result_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ASR_get_result_resultTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ASRResult.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ASR_get_result_result.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        ASRResult success; // required

        public ASR_get_result_result() {
        }

        public ASR_get_result_result(
                ASRResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ASR_get_result_result(ASR_get_result_result other) {
            if (other.isSetSuccess()) {
                this.success = new ASRResult(other.success);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public ASR_get_result_result deepCopy() {
            return new ASR_get_result_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public ASRResult getSuccess() {
            return this.success;
        }

        public ASR_get_result_result setSuccess(@org.apache.thrift.annotation.Nullable ASRResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((ASRResult) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ASR_get_result_result)
                return this.equals((ASR_get_result_result) that);
            return false;
        }

        public boolean equals(ASR_get_result_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(ASR_get_result_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ASR_get_result_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class ASR_get_result_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_get_result_resultStandardScheme getScheme() {
                return new ASR_get_result_resultStandardScheme();
            }
        }

        private static class ASR_get_result_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ASR_get_result_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ASR_get_result_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new ASRResult();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ASR_get_result_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ASR_get_result_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_get_result_resultTupleScheme getScheme() {
                return new ASR_get_result_resultTupleScheme();
            }
        }

        private static class ASR_get_result_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ASR_get_result_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ASR_get_result_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ASR_get_result_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new ASRResult();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class ASR_end_session_args implements org.apache.thrift.TBase<ASR_end_session_args, ASR_end_session_args._Fields>, java.io.Serializable, Cloneable, Comparable<ASR_end_session_args> {
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ASR_end_session_args");
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ASR_end_session_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ASR_end_session_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ASR_end_session_args.class, metaDataMap);
        }

        public ASR_end_session_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ASR_end_session_args(ASR_end_session_args other) {
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public ASR_end_session_args deepCopy() {
            return new ASR_end_session_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ASR_end_session_args)
                return this.equals((ASR_end_session_args) that);
            return false;
        }

        public boolean equals(ASR_end_session_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(ASR_end_session_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ASR_end_session_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class ASR_end_session_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_end_session_argsStandardScheme getScheme() {
                return new ASR_end_session_argsStandardScheme();
            }
        }

        private static class ASR_end_session_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ASR_end_session_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ASR_end_session_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ASR_end_session_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ASR_end_session_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_end_session_argsTupleScheme getScheme() {
                return new ASR_end_session_argsTupleScheme();
            }
        }

        private static class ASR_end_session_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ASR_end_session_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ASR_end_session_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ASR_end_session_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }
    }

    public static class ASR_end_session_result implements org.apache.thrift.TBase<ASR_end_session_result, ASR_end_session_result._Fields>, java.io.Serializable, Cloneable, Comparable<ASR_end_session_result> {
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ASR_end_session_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ASR_end_session_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ASR_end_session_resultTupleSchemeFactory();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ASR_end_session_result.class, metaDataMap);
        }

        public int success; // required
        private byte __isset_bitfield = 0;

        public ASR_end_session_result() {
        }

        public ASR_end_session_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ASR_end_session_result(ASR_end_session_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public ASR_end_session_result deepCopy() {
            return new ASR_end_session_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public ASR_end_session_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /**
         * Returns true if field success is set (has been assigned a value) and false otherwise
         */
        public boolean isSetSuccess() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.Integer) value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof ASR_end_session_result)
                return this.equals((ASR_end_session_result) that);
            return false;
        }

        public boolean equals(ASR_end_session_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + success;

            return hashCode;
        }

        @Override
        public int compareTo(ASR_end_session_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("ASR_end_session_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class ASR_end_session_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_end_session_resultStandardScheme getScheme() {
                return new ASR_end_session_resultStandardScheme();
            }
        }

        private static class ASR_end_session_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ASR_end_session_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ASR_end_session_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ASR_end_session_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ASR_end_session_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public ASR_end_session_resultTupleScheme getScheme() {
                return new ASR_end_session_resultTupleScheme();
            }
        }

        private static class ASR_end_session_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ASR_end_session_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ASR_end_session_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ASR_end_session_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

}
